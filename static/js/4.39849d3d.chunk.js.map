{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageFrom.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCYnKC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAQ,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACvC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCInBC,EARC,SAACT,GAEb,OAAO,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMU,U,yCCDvCC,EAAcC,YAAiB,IAetBC,cAAU,CAACC,KAAM,wBAAjBD,EAbQ,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBW,YAAY,qBAAqBd,KAAK,oBAEjD,6BAAK,6CCuBFe,EA5BC,SAACvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QACpF6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE/B,QAC9DsB,EAAMU,eAO3B,OAAKlC,EAAMmC,OAGP,yBAAKhC,UAAWC,IAAEuB,SACd,yBAAKxB,UAAWC,IAAEgC,cACbV,GAEL,yBAAKvB,UAAWC,IAAE4B,UACd,6BAAMD,IAEV,kBAAC,EAAD,CAAgBhB,SAfJ,SAACsB,GACjBrC,EAAMsC,YAAYD,EAAOH,gBACzBG,EAAOH,eAAiB,OAGF,kBAAC,IAAD,CAAU3B,GAAI,Y,wCCnBxCgC,EAA6B,SAACf,GAAD,MAAY,CACzCW,OAAQX,EAAMgB,KAAKL,S,OCgBRM,sBACXC,aAfkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACkB,GACtB,MAAO,CACHL,YAAa,SAACJ,GACVS,EAASC,YAAmBV,UDPR,SAACW,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAK/C,MAAMmC,OAET,kBAACU,EAAcE,KAAK/C,OAFI,kBAAC,IAAD,CAAUO,GAAI,eAHV,GACXyC,IAAMH,WAUtC,OAFqCH,YAAQH,EAARG,CAAqCI,KCI/DL,CAGblB","file":"static/js/4.39849d3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from \"react\";\nimport s from '../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    let path = '/dialogs/' + props.id;\n\n    return  <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n};\n\n\nexport default DialogItem;","import React from \"react\";\nimport s from '../Dialogs.module.css';\n\n\nconst Message = (props) => {\n\n    return <div className={s.message}>{props.message}</div>\n\n\n};\n\n\nexport default Message;","import React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       validate={[required, maxLength50]}\n                       placeholder='Enter your message' name='newMessageBody' />\n            </div>\n            <div><button>Send</button></div>\n        </form>\n    )\n}\n\nexport default reduxForm({form: 'dialogAddMessageForm'}) (AddMessageForm)\n","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageFrom\";\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\n    let newMessageBody = state.newMessageBody;\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n        values.newMessageBody = '';\n    };\n\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage}/>\n        </div>\n    )\n};\n\nexport default Dialogs;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\n\n            return <Component {...this.props}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","import React from \"react\";\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n};\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n};\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}